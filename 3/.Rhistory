mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "o", pch = 15, frame = FALSE,
col= 7,
xlab = "Number of clusters K",
ylab = "Average Silhouettes")
# Computing the average silhouette for k clusters
avg_sil <- function(k) {
km.res <- kmeans(wisc.data.scale, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, data.dist)
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "o", pch = 15, frame = FALSE,
col= 10,
xlab = "Number of clusters K",
ylab = "Average Silhouettes")
# Computing the average silhouette for k clusters
avg_sil <- function(k) {
km.res <- kmeans(wisc.data.scale, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, data.dist)
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "o", pch = 15, frame = FALSE,
col= 10,
xlab = "Number of clusters K",
ylab = "Average Silhouettes")
wisc.hclust.clusters<- cutree(wisc.hclust,k=4)
table(wisc.hclust.clusters,diagnosis)
mc1<-table(wisc.km2$cluster,diagnosis)
mc1 <-table(wisc.km2$cluster,diagnosis)
mc1
table(wisc.km2$cluster,diagnosis)
table(as.matrix(wisc.km2$cluster),as.matrix(wisc.hclust.clusters))
wisc.pr
wisc.pr$eig
wisc.pr$var
princomp(wisc.data.scale)
z<-princomp(wisc.data.scale)
z$scores
wisc.pr$ind
z$scores
knitr::opts_chunk$set(echo = TRUE)
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores
scores(scores(1:9))
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores
scores(1:9)
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores
scores(1:9,:)
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[1:10]
scores
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[1:10,]
scores
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[,1:10]
scores
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[,1:10]
pc.comp1 <- scores[,1]
pc.comp2 <- scores[,2]]
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[,1:10]
pc.comp1 <- scores[,1]
pc.comp2 <- scores[,2]
wisc.pca$scores
h<-PCA(wisc.data.scale)
library(dplyr)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(magrittr)
library(knitr)
library(purrr)
library(dendextend)
library(cluster)
h<-PCA(wisc.data.scale)
h$eig
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[,1:7]
pc.comp1 <- scores[,1]
pc.comp2 <- scores[,2]
wisc.pca<-princomp(wisc.data.scale)
scores<-wisc.pca$scores[,1:7]
pc.comp1 <- scores[,1]
pc.comp2 <- scores[,2]
data.dist <- dist(wisc.pca,"euclidean")
wisc.pca<-PCA(wisc.data.scale)
#scores<-wisc.pca$scores[,1:7]
#pc.comp1 <- scores[,1]
#pc.comp2 <- scores[,2]
data.dist <- dist(wisc.pca,"euclidean")
wisc.pca$eig
wisc.pca<-PCA(wisc.data.scale,graph = FALSE)
#scores<-wisc.pca$scores[,1:7]
#pc.comp1 <- scores[,1]
#pc.comp2 <- scores[,2]
data.dist <- dist(wisc.pca,"euclidean")
wisc.pca<-PCA(wisc.data.scale,ncp = 3,graph = FALSE)
#scores<-wisc.pca$scores[,1:7]
#pc.comp1 <- scores[,1]
#pc.comp2 <- scores[,2]
data.dist <- dist(wisc.pca,"euclidean")
wisc.pca<-PCA(wisc.data.scale,ncp = 3,graph = FALSE)
#scores<-wisc.pca$scores[,1:7]
#pc.comp1 <- scores[,1]
#pc.comp2 <- scores[,2]
data.dist <- dist(wisc.pca$eig,"euclidean")
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
#scores<-wisc.pca$scores[,1:7]
#pc.comp1 <- scores[,1]
#pc.comp2 <- scores[,2]
data.dist <- dist(wisc.pca$eig,"euclidean")
#Setting Number of principal components at 7 in order to get at least 90% of the variability in the data
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
#scores<-wisc.pca$scores[,1:7]
#pc.comp1 <- scores[,1]
#pc.comp2 <- scores[,2]
pca.dist <- dist(wisc.pca$eig,"euclidean")
wisc.pr.hclust <- hclust(pca.dist,method="complete")
wisc.pr.hclust
wisc.pr.hclust$merge
wisc.pr.hclust$height
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pca
wisc.pca$eig
pca.dist
#Setting Number of principal components at 7 in order to get at least 90% of the variability in the data
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
pca.dist <- dist(wisc.pca$var ,"euclidean")
wisc.pca$ind
#Setting Number of principal components at 7 in order to get at least 90% of the variability in the data
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
pca.dist <- dist(wisc.pca$cos2 ,"euclidean")
wisc.pr$cos2
wisc.pr$dist
wisc.pr$ind$cos2
#Setting Number of principal components at 7 in order to get at least 90% of the variability in the data
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
pca.dist <- dist(wisc.pca$ind$cos2 ,"euclidean")
wisc.pr.hclust <- hclust(pca.dist,method="complete")
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
table(wisc.hclust.clusters,diagnosis)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(magrittr)
library(knitr)
library(purrr)
library(dendextend)
library(cluster)
wisc.df <-read.csv("WisconsinCancer.csv")
wisc.data <-as.matrix(wisc.df[3:32])
rownames(wisc.data)<- make.names(paste(wisc.df[,1]),unique=TRUE)
diagnosis <- ifelse(wisc.df[,2] =="M",1,0)
wisc.data <- cbind(wisc.data, diagnosis)
head(colMeans(wisc.data))
head(apply(wisc.data, MARGIN = 1,FUN = "sd"))
#Scaling dataset
wisc.data.scale<-scale(wisc.data)
wisc.pr<-PCA(wisc.data.scale)
head(summary(wisc.pr))
data.scaled <- scale(wisc.data)
data.dist <- dist(wisc.data,"euclidean")
wisc.hclust <- hclust(data.dist,method="complete")
#By using the dendextend package we can separate the clusters by colors
dendh <- as.dendrogram(wisc.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.hclust.clusters<- cutree(wisc.hclust,k=4)
table(wisc.hclust.clusters,diagnosis)
set.seed(144)
wisc.km2 <- kmeans(wisc.data.scale,2,iter.max = 20)
wisc.km3 <- kmeans(wisc.data.scale,3,iter.max = 20)
wisc.km4 <- kmeans(wisc.data.scale,4,iter.max = 20)
wisc.km5 <- kmeans(wisc.data.scale,5,iter.max = 20)
table(wisc.km2$cluster,diagnosis)
table(as.matrix(wisc.km2$cluster),as.matrix(wisc.hclust.clusters))
fviz_cluster(wisc.km2,wisc.data.scale)
fviz_cluster(wisc.km3,wisc.data.scale)
fviz_cluster(wisc.km4,wisc.data.scale)
fviz_cluster(wisc.km5,wisc.data.scale)
# Computing the average silhouette for k clusters
avg_sil <- function(k) {
km.res <- kmeans(wisc.data.scale, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, data.dist)
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "o", pch = 15, frame = FALSE,
col= 10,
xlab = "Number of clusters K",
ylab = "Average Silhouettes")
#Setting Number of principal components at 7 in order to get at least 90% of the variability in the data
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
pca.dist <- dist(wisc.pca$ind$cos2 ,"euclidean")
wisc.pr.hclust <- hclust(pca.dist,method="complete")
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
table(wisc.pr.hclust.clusters,diagnosis)
table(wisc.hclust.clusters,diagnosis)
wisc.pca
#Setting Number of principal components at 7 in order to get at least 90% of the variability in the data
wisc.pca<-PCA(wisc.data.scale,ncp = 7,graph = FALSE)
pca.dist <- dist(wisc.pca$ind$coord ,"euclidean")
wisc.pr.hclust <- hclust(pca.dist,method="complete")
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
table(wisc.pr.hclust.clusters,diagnosis)
table(wisc.hclust.clusters,diagnosis)
wisc.pr$eig
wisc.pr$ind$coord
table(wisc.km2$cluster,diagnosis)
table(wisc.pr.hclust.clusters,diagnosis)
table(wisc.hclust.clusters,diagnosis)
knitr::kable(table(wisc.km2$cluster,diagnosis))
knitr::kable(table(wisc.pr.hclust.clusters,diagnosis))
knitr::kable(table(wisc.hclust.clusters,diagnosis))
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
knitr::kable(table(wisc.km2$cluster,diagnosis))
knitr::kable(table(wisc.pr.hclust.clusters,diagnosis))
knitr::kable(table(wisc.hclust.clusters,diagnosis))
?knitr::kable
knitr::kable(table(wisc.km2$cluster,diagnosis),booktabs=TRUE, caption = "Actual diagnosis")
knitr::kable(table(wisc.pr.hclust.clusters,diagnosis),booktabs=TRUE, caption = "Actual diagnosis")
knitr::kable(table(wisc.hclust.clusters,diagnosis))
knitr::kable(table(wisc.km2$cluster,diagnosis),booktabs=TRUE, caption = "Actual diagnosis")
knitr::kable(table(wisc.pr.hclust.clusters,diagnosis),booktabs=TRUE, caption = "Results by Non-Hierarchical clustering")
knitr::kable(table(wisc.hclust.clusters,diagnosis),booktabs=TRUE, caption = "Results by Hierarchical clustering")
View(diagnosis)
knitr::kable(table(wisc.km2$cluster,diagnosis),booktabs=TRUE, caption = "Results by Kmeans")
knitr::kable(table(wisc.pr.hclust.clusters,diagnosis),booktabs=TRUE, caption = "Results by Non-Hierarchical clustering")
knitr::kable(table(wisc.hclust.clusters,diagnosis),booktabs=TRUE, caption = "Results by Hierarchical clustering")
wisc.data
View(wisc.data)
length(diagnosis(-1))
diagnosis(-1)
diagnosis
diagnosis[diagnosis==0]
length(diagnosis[diagnosis==0])/length(diagnosis)
length(diagnosis[diagnosis==0])
length(diagnosis[diagnosis==1])
179/212
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:4, k = 2) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods"); abline(h = 2500, col = 2, lty = 2)
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
#By using the dendextend package we can separate the clusters by colors
dend.pr <- as.dendrogram(wisc.pr.hclust) %>% set("branches_k_color", value = 2:6, k = 4) %>%
plot(main = "Cancer clustering by Hierarchical methods")
wisc.pr.hclust.clusters<- cutree(wisc.pr.hclust,k=4)
install.packages(c("maps", "mapdata"))
# load ggmap
library(ggmap)
# create vector of place names
places_names <- c("Museum of Modern Art New York, NY",
"Smithsonian Museum of American Art Washington, DC",
"Brooklyn Museum Brooklyn, NY",
"Walker Art Center Minneapolis, MN",
"Fralin Museum of Art Charlottesville, VA")
install.packages("ggmap")
# load ggmap
library(ggmap)
# load ggmap
library(ggmap)
# create vector of place names
places_names <- c("Museum of Modern Art New York, NY",
"Smithsonian Museum of American Art Washington, DC",
"Brooklyn Museum Brooklyn, NY",
"Walker Art Center Minneapolis, MN",
"Fralin Museum of Art Charlottesville, VA")
# apply distance calculation to all combinations of place names
dist_list <- lapply(places_names,
function(z)
sapply(z,
function(x)
mapdist(from=places_names, to=x)$miles)
)
# view results as list
dist_list
# unlist results and convert to a "named" matrix format
dist_mat <- sapply(dist_list, unlist)
colnames(dist_mat) <- places_names
rownames(dist_mat) <- places_names
# view results as matrix
dist_mat
places_names
# apply distance calculation to all combinations of place names
dist_list <- lapply(places_names,
function(z)
sapply(z,
function(x)
mapdist(from=places_names, to=x)$miles)
)
# unlist results and convert to a "named" matrix format
dist_mat <- sapply(dist_list, unlist)
my_mdl <- lm(mpg ~ disp, data=mtcars)
set.seed(1234)
newdata <- sample(mtcars$disp, 5)
newdata
newdf <- data.frame(mpg=mtcars$mpg[1:10], disp=mtcars$disp[1:10])
View(newdf)
View(mtcars)
View(mtcars)
class(newdata)
my_mdl
my_mdl$model
dim(my_mdl$model)
my_mdl <- lm(mpg ~ disp, data=mtcars)
set.seed(1234)
newdata <- sample(mtcars$disp, 5)
newdata
newdf <- data.frame(disp=newdata)
predict(my_mdl, newdf)
newdata
my_mdl
dim(mtcars)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/1")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/2")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/1")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/2")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
nedc<-read.table("190205_115024.txt")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/1")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/3")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
speeda
View(speeda)
real.time
View(real.time)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
real.time[1:300]
60*300
real.time<-real.time[18000:,]
295*60
160*300
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
real.time
70*295
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
length(speed)
96*295
48000-20650
length(speed)
55*295
130*295
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
speeda
plot(speeda)
real.time
162-70
60+36
real.timea
View(real.timea)
130-54
60+26
ds<-sample(speeda, 1000)
ds
plot(ds)
plot(ds,type="l")
timea<-nedc.agre$V1%>%as.numeric()
ds<-sample(speeda, 10)
plot(ds,type="l")
install.packages("signal")
ds<-resample(speeda, 1,1000)
library(signal)
ds<-resample(speeda, 1,1000)
plot(ds,type="l")
ds<-resample(speeda, 1,500)
plot(ds,type="l")
ds<-resample(speeda, 1,600)
plot(ds,type="l")
ds<-resample(speeda, 1,650)
plot(ds,type="l")
ds<-resample(speeda, 1,600)
plot(ds,type="l")
ds<-resample(speeda, 1,295)
plot(ds,type="l")
ds<-resample(speeda, 1,500)
plot(ds,type="l")
ds<-resample(speeda, 1,295)
plot(ds,type="l")
ds<-resample(speed, 1,295)
plot(ds,type="l")
295/2
ds<-resample(speed, 1,147.5)
plot(ds,type="l")
ds<-resample(speed, 2,147.5)
plot(ds,type="l")
ds<-resample(speed, 5,147.5)
plot(ds,type="l")
ds<-resample(speed, 5,295)
plot(ds,type="l")
ds<-resample(speed, 1,295)
plot(ds,type="l")
ds<-resample(speeda, 1,295)
plot(ds,type="l")
length(ds)
ds<-resample(speed, 1,295)
length(ds)
plot(ds,type="l")
View(speed)
View(ds)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
1/295
speed
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
speed
plot(speed)
View(speed)
speed>400
speed>40
max.print
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
speed
View(speed)
View(speed)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
speed
26351/295
View(speed)
time
real.time
80-69
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/2")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
setwd("C:/Users/LabM/Desktop/LCT Sim v1.2/3")
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
source('C:/Users/LabM/Desktop/LCT Sim v1.2/LectureProfile.R', echo=TRUE)
Viewds
ds
